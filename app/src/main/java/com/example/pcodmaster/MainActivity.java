package com.example.pcodmaster;

import static java.lang.Thread.sleep;

import android.annotation.SuppressLint;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.StrictMode;
import android.text.format.Formatter;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.bumptech.glide.Glide;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    public OutputStream outputStream = null;
    public InputStream inputStream = null;
    String name = "";
    String addressToConnect = "";
    BluetoothSocket bluetoothSocket = null;
    EditText sendBox;
    TextView recieveBox;

    ExternalThread externalThread;

    public static char switchChar(char c) {
        return c == '0' ? '1' : '0';
    }

    public static int twosCompliment(String bin) {
        String data = "";
//        int length = 18 - data.length();
//        for(int i = 0; i < length; i ++){
//            data = data + '1';
//        }
        for (int i = 0; i < bin.length(); i++) {
            data = data + switchChar(bin.charAt(i));
        }
        int res = Integer.parseInt(data, 2);
        return res;
    }

    public static int shifterECG(int msb_sample, int mid_sample, int lsb_sample) {
        int temp = 0;
//        msb_sample = 0x00000003 & msb_sample;
        msb_sample = msb_sample << 16;
        temp = temp | msb_sample;
        mid_sample = mid_sample << 8;
        temp = temp | mid_sample;
        temp = temp | lsb_sample;
        temp = temp & 0x3FFFF;

//        Log.e("Value", Integer.toBinaryString(temp));
//        temp = twosCompliment(Integer.toBinaryString(temp)) + 0x01;
//        Log.e("Value 2s", Integer.toBinaryString(temp));
//        Log.e("Temp", String.valueOf(temp));
//        temp -= 1400;
//        temp = ~temp;
        return temp;
    }

    public static int shifterPPG(int msb_sample, int mid_sample, int lsb_sample) {
        int temp = 0;
//        msb_sample = 0x00000003 & msb_sample;
        msb_sample = msb_sample << 16;
        temp = temp | msb_sample;
        mid_sample = mid_sample << 8;
        temp = temp | mid_sample;
        temp = temp | lsb_sample;
        temp = temp & 0xFFFFF;
//        temp = ~temp;
//        temp = temp + 0x01;
        return temp;
    }

    public String recieveData(int packetCode) {
        String data = "";

        try {
//            inputStream.skip(inputStream.available());
            int size = inputStream.read();

            for (int i = 0; i < size; i++) {
                data = data + (char) inputStream.read();
            }
            Toast.makeText(getApplicationContext(), "Size: " + size, Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            Log.e("Packet Error", "Packet Not Recieved: " + packetCode);
            e.printStackTrace();
        }

        return data;
    }

    public ArrayList<Integer> recieveECG() throws IOException {
        externalThread.kill = false;
        ArrayList<Integer> ret;
        outputStream.write((byte) 1);

//        inputStream.skip(inputStream.available());
//        int packetCounter = inputStream.read();// = 3
//        inputStream.skip(inputStream.available());
//        inputStream.read();
//        int packetSize = inputStream.read(); //  = 18

//

//        Toast.makeText(getApplicationContext(), "PacketSize: " + packetSize, Toast.LENGTH_SHORT).show();

        ret = externalThread.runECG(inputStream, outputStream);
        outputStream.write((byte) 4);
//        Toast.makeText(getApplicationContext(), "Size: " + ret.size(), Toast.LENGTH_SHORT).show();
//        outputStream.write((byte) 4);
        return ret;
    }

    public ArrayList<Integer> recievePPG() throws IOException {
        externalThread.kill = false;
        ArrayList<Integer> ret;
        outputStream.write((byte) 2);
        ret = externalThread.runPPG(inputStream, outputStream);
        outputStream.write((byte) 4);
        Toast.makeText(getApplicationContext(), "Size: " + ret.size(), Toast.LENGTH_SHORT).show();
        return ret;
    }

    public void recieveTemp() throws IOException {
        externalThread.kill = false;
        outputStream.write((byte) 3);
//        outputStream.write((byte) 4);
    }


//    public int heartRate() throws IOException {
//        sendData((byte)2);
//        inputStream.skip(inputStream.available());
//        int hr = inputStream.read() & 0xff;
//        return hr;
//    }

    public void sendData(byte instruction) throws IOException {
        outputStream.write(instruction);
    }


    @SuppressLint("MissingPermission")
    public boolean connect(BluetoothDevice myDevice) {

        final UUID mUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
        int counter = 0;
        boolean ret = false;
        do {
            try {
//                            System.out.println(myDevice.toString());
                bluetoothSocket = myDevice.createRfcommSocketToServiceRecord(mUUID);
//                            System.out.println(bluetoothSocket);
                bluetoothSocket.connect();
//                System.out.println(bluetoothSocket.isConnected());
                if (bluetoothSocket.isConnected()) {
                    Toast.makeText(this, "Connected to " + myDevice.getName(), (int) 100).show();

                }
            } catch (IOException e) {
                Toast.makeText(this, "Cannot connect to " + myDevice.getName() + ". Please retry.", (int) 100).show();
                e.printStackTrace();
            }
            counter++;
        }
        while (!bluetoothSocket.isConnected() && counter < 5);


        try {
            outputStream = bluetoothSocket.getOutputStream();
            inputStream = bluetoothSocket.getInputStream();
            Helper.getInstance().setOutputStreamer(outputStream);
            Helper.getInstance().setInputStreamer(inputStream);
            ret = true;

        } catch (IOException e) {
            Toast.makeText(getApplicationContext(), "bluetooth socket error", Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }

        return ret;
    }

    @SuppressLint("MissingPermission")
    @Override
    protected void onPause() {
        try {
            outputStream.write((byte) 4);
        } catch (IOException e) {
            e.printStackTrace();
        }
        super.onPause();
        externalThread.kill = true;
    }

    @SuppressLint("MissingPermission")
    @Override
    protected void onStop() {
        super.onStop();
        try {
            outputStream.write((byte) 4);
        } catch (IOException e) {
            e.printStackTrace();
        }
        externalThread.kill = true;
    }

    @SuppressLint("MissingPermission")
    @Override
    protected void onDestroy() {
        try {
            outputStream.write((byte) 4);
        } catch (IOException e) {
            e.printStackTrace();
        }
        super.onDestroy();
        externalThread.kill = true;
    }


    @SuppressLint("MissingPermission")
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        externalThread = new ExternalThread();
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        Button ecg = findViewById(R.id.ecgBut);
        Button temp = findViewById(R.id.tempBut);
        Button ppg = findViewById(R.id.ppgBut);

        ecg.setEnabled(false);
        temp.setEnabled(false);
        ppg.setEnabled(false);

        Button connect = findViewById(R.id.connectBut);
        Button camStream = findViewById(R.id.CamButton);

        TextView dispHr = findViewById(R.id.hr);
        EditText dispTemp = findViewById(R.id.temp);
        EditText dispAmbtemp = findViewById(R.id.ambtemp);
        TextView getName = findViewById(R.id.divName);


        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        bluetoothAdapter.startDiscovery();

        Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();

        connect.setOnClickListener(new View.OnClickListener() {
            @SuppressLint("WrongConstant")
            @Override
            public void onClick(View view) {
                BluetoothDevice myDevice = null;
                name = getName.getText().toString();

//                Toast.makeText(getApplicationContext(), "Connecting to " + name, Toast.LENGTH_SHORT).show();

//                textView.setText("");

                if (pairedDevices.size() > 0) {
                    // Loop through paired device
                    for (BluetoothDevice device : pairedDevices) {
//                        Toast.makeText(getApplicationContext(), device.getName().toString(), Toast.LENGTH_SHORT).show();

                        if (device.getName().equals(name)) {
                            addressToConnect = bluetoothAdapter.getRemoteDevice(device.getAddress()).toString();
//                            Toast.makeText(getApplicationContext(),device.getName().toString() + ": "+ addressToConnect, Toast.LENGTH_LONG).show();
                            myDevice = bluetoothAdapter.getRemoteDevice(addressToConnect);

//                            Toast.makeText(getApplicationContext(), myDevice.toString(), Toast.LENGTH_SHORT).show();
//                            System.out.println(myDevice.getName().toString());
//                            Toast.makeText(getApplicationContext(), bluetoothAdapter.getRemoteDevice(device.getAddress()).toString(), Toast.LENGTH_LONG).show();
                            break;
                        }
                    }

                    if (connect(myDevice)) {
                        ecg.setEnabled(true);
                        temp.setEnabled(true);
                        connect.setEnabled(false);
                        ppg.setEnabled(true);
                        try {
                            outputStream.write((byte) 4);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
//                        externalThread.run();
                    }
                } else {
                    Toast.makeText(getApplicationContext(), "no devices connected", (int) 100).show();
                }
            }
        });

        camStream.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                RequestQueue volleyQueue = Volley.newRequestQueue(MainActivity.this);
                String url = "http://sensorlifeline.com/get-espcam-link.php";
//                String url = "http://sensorlifeline.com/get-esp.php";

                JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
                        // we are using GET HTTP request method
                        Request.Method.GET,
                        // url we want to send the HTTP request to
                        url,
                        // this parameter is used to send a JSON object to the
                        // server, since this is not required in our case,
                        // we are keeping it `null`
                        null,

                        // lambda function for handling the case
                        // when the HTTP request succeeds
                        (Response.Listener<JSONObject>) response -> {
                            // get the image url from the JSON object
                            String result;

                            try {
//                                Log.v("response", response.toString());
                                result = response.getString("strLink");
                                // load the image into the ImageView using Glide.
//                                Log.e("Response", result);
                                Intent intent = new Intent(getApplicationContext(), stream.class);
                                intent.putExtra("link", result);
                                startActivity(intent);

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        },
                        (Response.ErrorListener) error -> {
                            Toast.makeText(MainActivity.this, "Some error occurred!", Toast.LENGTH_LONG).show();
                        }
                );

                volleyQueue.add(jsonObjectRequest);
            }
        });

        ecg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //                    inputStream.skip(inputStream.available());
//                    ArrayList<Integer> ecg = recieveECG();
//                    recieveBox.setText(ecg.toString());
//                    Intent intent = new Intent(MainActivity.this, Chart.class);
                Intent intent = new Intent(MainActivity.this, LiveGraph.class);
                startActivity(intent);

            }
        });

        temp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                externalThread.kill = true;
                try {
                    recieveTemp();
                    sleep(5000);
                    outputStream.write((byte) 4);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        ppg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
//                    inputStream.skip(inputStream.available());
                    ArrayList<Integer> ecg = recievePPG();
//                    recieveBox.setText(ecg.toString());
                    Intent intent = new Intent(MainActivity.this, Chart.class);
                    intent.putIntegerArrayListExtra("list", ecg);
                    startActivity(intent);

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

    }

    class ExternalThread extends Thread {

        Boolean kill = false;

        MainActivity mainActivity = new MainActivity();

        String receiveData = null;

        public ArrayList<Integer> runECG(InputStream inputStream, OutputStream outputStream) throws IOException {

            int sampleSize = 12000;
            ArrayList<Integer> list = new ArrayList<Integer>();
//        inputStream.read();
//
            ArrayList<Integer> data = new ArrayList<Integer>();
//        new ArrayList<Type>(
//        ArrayList<Integer> data = new ArrayList<>(Arrays.asList(0xB0, 0x00, 0xC5, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x17, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x56, 0xB0, 0x01, 0x5B, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x40, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x45, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xE2, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xD7, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x14, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xE0, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xCD, 0xB0, 0x00, 0xD8, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xE4, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x13, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x0F, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF4, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xD7, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xED, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xEA, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x50, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x0F, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xCB, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x1F, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x1A, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x15, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xD6, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x47, 0xB0, 0x01, 0x70, 0xB0, 0x01, 0x89, 0xB0, 0x01, 0xB9, 0xB0, 0x01, 0xDE, 0xB0, 0x02, 0x03, 0xB0, 0x02, 0x11, 0xB0, 0x02, 0x41, 0xB0, 0x02, 0x56, 0xB0, 0x02, 0x72, 0xB0, 0x02, 0xB8, 0xB0, 0x02, 0xF4, 0xB0, 0x02, 0xD3, 0xB0, 0x02, 0xB5, 0xB0, 0x02, 0x90, 0xB0, 0x02, 0x5D, 0xB0, 0x02, 0x04, 0xB0, 0x01, 0x98, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xCD, 0xB0, 0x00, 0x87, 0xB0, 0x00, 0x5F, 0xB0, 0x00, 0x59, 0xB0, 0x00, 0x60, 0xB0, 0x00, 0x6E, 0xB0, 0x00, 0x77, 0xB0, 0x00, 0x65, 0xB0, 0x00, 0x87, 0xB0, 0x00, 0xA0, 0xB0, 0x00, 0xA7, 0xB0, 0x00, 0xB8, 0xB0, 0x00, 0x9E, 0xB0, 0x00, 0xBC, 0xB0, 0x00, 0xDA, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xEE, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2D, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x45, 0xB0, 0x01, 0x4B, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x4B, 0xB0, 0x01, 0x46, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x41, 0xB0, 0x01, 0x53, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x45, 0xB0, 0x01, 0x5F, 0xB0, 0x01, 0x5C, 0xB0, 0x01, 0x50, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xD4, 0xB0, 0x00, 0xCF, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xC2, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xD5, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x22, 0xB0, 0x00, 0xE7, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xC6, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xEE, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF3, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF1, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x14, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xE5, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xE1, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0F, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xD0, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xD7, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x0C, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xCA, 0xB0, 0x00, 0xDF, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xEA, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x4A, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x17, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xE9, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x0C, 0xB0, 0x00));
//        ArrayList<Integer> data1 = new ArrayList<>(Arrays.asList(0xF1, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x10, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xD9, 0xB0, 0x00, 0xE4, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x11, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0xC1, 0xB0, 0x00, 0xD5, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x80, 0xB0, 0x01, 0xAA, 0xB0, 0x01, 0xEA, 0xB0, 0x02, 0x16, 0xB0, 0x02, 0x14, 0xB0, 0x02, 0x31, 0xB0, 0x02, 0x3E, 0xB0, 0x02, 0x6F, 0xB0, 0x02, 0x9A, 0xB0, 0x02, 0xBB, 0xB0, 0x02, 0xDA, 0xB0, 0x02, 0xC5, 0xB0, 0x02, 0x6C, 0xB0, 0x02, 0x40, 0xB0, 0x02, 0x23, 0xB0, 0x01, 0xB4, 0xB0, 0x01, 0x5C, 0xB0, 0x01, 0x15, 0xB0, 0x00, 0xD2, 0xB0, 0x00, 0x8C, 0xB0, 0x00, 0x5F, 0xB0, 0x00, 0x68, 0xB0, 0x00, 0x72, 0xB0, 0x00, 0x8A, 0xB0, 0x00, 0x87, 0xB0, 0x00, 0x88, 0xB0, 0x00, 0x93, 0xB0, 0x00, 0x9B, 0xB0, 0x00, 0xAD, 0xB0, 0x00, 0xBD, 0xB0, 0x00, 0xAE, 0xB0, 0x00, 0xC6, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xDA, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x11, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x2F, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x4A, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xED, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x41, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x25, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xE9, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xC7, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xEE, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x12, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xDF, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x18, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xD2, 0xB0, 0x00, 0xEF, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xF1, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF3, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x1C, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xDD, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE0, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x11, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x51, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x44, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x41, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xE0, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x1E, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xD3, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xD4, 0xB0, 0x00, 0xD3, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xE2, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x6C, 0xB0, 0x01, 0x9A, 0xB0, 0x01, 0xC5, 0xB0, 0x01, 0xE8, 0xB0, 0x02, 0x22, 0xB0, 0x02, 0x3A, 0xB0, 0x02, 0x4D, 0xB0, 0x02, 0x67, 0xB0, 0x02, 0x82, 0xB0, 0x02, 0xB6, 0xB0, 0x02, 0xD6, 0xB0, 0x02, 0xC9, 0xB0, 0x02, 0xAC, 0xB0, 0x02, 0x88, 0xB0, 0x02, 0x3F, 0xB0, 0x01, 0xD7, 0xB0, 0x01, 0x94, 0xB0, 0x01, 0x61, 0xB0, 0x00, 0xE0, 0xB0, 0x00, 0x92, 0xB0, 0x00, 0x70, 0xB0, 0x00, 0x59, 0xB0, 0x00, 0x4C, 0xB0, 0x00, 0x74, 0xB0, 0x00, 0x79, 0xB0, 0x00, 0x76, 0xB0, 0x00, 0x78, 0xB0, 0x00, 0x98, 0xB0, 0x00, 0xAA, 0xB0, 0x00, 0xB2, 0xB0, 0x00, 0xC1, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xDA, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xD7, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x22, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xD6, 0xB0, 0x00, 0xDD, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x1C, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x10, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x18, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x45, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x4B, 0xB0, 0x01, 0x46, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x10, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xCD, 0xB0, 0x00, 0xE0, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xD8, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xE2, 0xB0, 0x00, 0xDE, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF1, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xED, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xD8, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xDB, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x16, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xEF, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xE1, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xCB, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xEE, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xEB, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xD2, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xDD, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xE9, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF3, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x17, 0xB0));
//        ArrayList<Integer> data2 = new ArrayList<>(Arrays.asList(0x01, 0x21, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xEC, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x2F, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x61, 0xB0, 0x01, 0x52, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x44, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x3A, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2E, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x0E, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF4, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xDD, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xE8, 0xB0, 0x00, 0xB5, 0xB0, 0x00, 0xB5, 0xB0, 0x00, 0xDD, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x70, 0xB0, 0x01, 0x98, 0xB0, 0x01, 0xC1, 0xB0, 0x01, 0xCC, 0xB0, 0x01, 0xF5, 0xB0, 0x02, 0x1A, 0xB0, 0x02, 0x3E, 0xB0, 0x02, 0x57, 0xB0, 0x02, 0x7E, 0xB0, 0x02, 0xB7, 0xB0, 0x02, 0xDB, 0xB0, 0x02, 0xD0, 0xB0, 0x02, 0xC0, 0xB0, 0x02, 0x8B, 0xB0, 0x02, 0x55, 0xB0, 0x02, 0x11, 0xB0, 0x01, 0x99, 0xB0, 0x01, 0x51, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0x9C, 0xB0, 0x00, 0x82, 0xB0, 0x00, 0x6D, 0xB0, 0x00, 0x5A, 0xB0, 0x00, 0x61, 0xB0, 0x00, 0x7B, 0xB0, 0x00, 0x8B, 0xB0, 0x00, 0x9B, 0xB0, 0x00, 0xA0, 0xB0, 0x00, 0xA5, 0xB0, 0x00, 0xAA, 0xB0, 0x00, 0x9F, 0xB0, 0x00, 0xBE, 0xB0, 0x00, 0xCA, 0xB0, 0x00, 0xDB, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x0D, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x0F, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xDB, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF7, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xE9, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x07, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x23, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x3D, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x40, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x2D, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xED, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x0B, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xD9, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xDA, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xDD, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xE9, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEB, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xE4, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xF0, 0xB0, 0x01, 0x0C, 0xB0, 0x01, 0x08, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x01, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xEE));
//                List<Integer> data3 = Arrays.asList(0xB0, 0x01, 0x08, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xE1, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xD8, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFC, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xED, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xEF, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xCF, 0xB0, 0x00, 0xE2, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x0C, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x09, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xF3, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xEE, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xE0, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x0A, 0xB0, 0x00, 0xF2, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFA, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x06, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF8, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF4, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF9, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xE5, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xE7, 0xB0, 0x00, 0xEF, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xEA, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xFF, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xF4, 0xB0, 0x00, 0xF2, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x1C, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x21, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x3C, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x25, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x3B, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x1F, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x4A, 0xB0, 0x01, 0x32, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x42, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x43, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x2B, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x1E, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x2A, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x10, 0xB0, 0x01, 0x0C, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF0, 0xB0, 0x00, 0xF6, 0xB0, 0x01, 0x08, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xE3, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0D, 0xB0, 0x01, 0x1A, 0xB0, 0x00, 0xF3, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x0F, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x02, 0xB0, 0x00, 0xF8, 0xB0, 0x00, 0xFB, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x00, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xD2, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0xE5, 0xB0, 0x01, 0x1B, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x78, 0xB0, 0x01, 0xB1, 0xB0, 0x01, 0xC9, 0xB0, 0x01, 0xE7, 0xB0, 0x02, 0x0B, 0xB0, 0x02, 0x34, 0xB0, 0x02, 0x50, 0xB0, 0x02, 0x5D, 0xB0, 0x02, 0x77, 0xB0, 0x02, 0xDF, 0xB0, 0x02, 0xF9, 0xB0, 0x02, 0xD1, 0xB0, 0x02, 0xA9, 0xB0, 0x02, 0x82, 0xB0, 0x02, 0x33, 0xB0, 0x01, 0xDA, 0xB0, 0x01, 0x71, 0xB0, 0x01, 0x22, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0x8C, 0xB0, 0x00, 0x83, 0xB0, 0x00, 0x74, 0xB0, 0x00, 0x57, 0xB0, 0x00, 0x69, 0xB0, 0x00, 0x83, 0xB0, 0x00, 0xA5, 0xB0, 0x00, 0xA4, 0xB0, 0x00, 0xA3, 0xB0, 0x00, 0xA6, 0xB0, 0x00, 0xB8, 0xB0, 0x00, 0xCB, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xD1, 0xB0, 0x00, 0xE3, 0xB0, 0x00, 0xF6, 0xB0, 0x00, 0xE6, 0xB0, 0x00, 0xEF, 0xB0, 0x00, 0xFD, 0xB0, 0x01, 0x06, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x10, 0xB0, 0x00, 0xFC, 0xB0, 0x00, 0xFF, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x04, 0xB0, 0x00, 0xFB, 0xB0, 0x00, 0xFD, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xF1, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x15, 0xB0, 0x01, 0x05, 0xB0, 0x00, 0xFE, 0xB0, 0x01, 0x02, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xF7, 0xB0, 0x00, 0xF5, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x17, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x07, 0xB0, 0x01, 0x10, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xF4, 0xB0, 0x01, 0x01, 0xB0, 0x00, 0xFE, 0xB0, 0x00, 0xFA, 0xB0, 0x00, 0xEC, 0xB0, 0x00, 0xDC, 0xB0, 0x00, 0xF1, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x11, 0xB0, 0x01, 0x03, 0xB0, 0x00, 0xF5, 0xB0, 0x00, 0xF9, 0xB0, 0x01, 0x09, 0xB0, 0x01, 0x2F, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x00, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x04, 0xB0, 0x01, 0x0F, 0xB0, 0x00, 0xED, 0xB0, 0x01, 0x05, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x03, 0xB0, 0x01, 0x0E, 0xB0, 0x01, 0x3F, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x13, 0xB0, 0x01, 0x14, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x18, 0xB0, 0x01, 0x19, 0xB0, 0x01, 0x33, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x4F, 0xB0, 0x01, 0x52, 0xB0, 0x01, 0x28, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x30, 0xB0, 0x01, 0x2C, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x48, 0xB0, 0x01, 0x50, 0xB0, 0x01, 0x49, 0xB0, 0x01, 0x35, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x38, 0xB0, 0x01, 0x39, 0xB0, 0x01, 0x4A, 0xB0, 0x01, 0x3E, 0xB0, 0x01, 0x47, 0xB0, 0x01, 0x4E, 0xB0, 0x01, 0x37, 0xB0, 0x01, 0x4E, 0xB0, 0x01, 0x49, 0xB0, 0x01, 0x34, 0xB0, 0x01, 0x27, 0xB0, 0x01, 0x31, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x12, 0xB0, 0x01, 0x16, 0xB0, 0x01, 0x26, 0xB0, 0x01, 0x36, 0xB0, 0x01, 0x22, 0xB0, 0x01, 0x0B, 0xB0, 0x01, 0x1D, 0xB0, 0x01, 0x20, 0xB0, 0x01, 0x1A, 0xB0, 0x01, 0x24, 0xB0, 0x01, 0x29, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x0A, 0xB0, 0x01, 0x1B);
            while (!kill) {

//                int data[] = new int[packetSize];

//                for(int i = 0; i < packetSize; i ++){
//                    data[i] = (int) inputStream.read();
//                }
                data.add(inputStream.read());

                Log.e("data", data.toString());

                if((sampleSize - data.size()) % 1000 == 0){
                    Toast.makeText(getApplicationContext(), String.valueOf((sampleSize - data.size()) / 1000), Toast.LENGTH_SHORT ).show();
                }
//            Log.e("ddd", data.toString());
//            Log.e("size: ", String.valueOf(data.size()));
                if (data.size() >= sampleSize) {
                    kill = true;
                    outputStream.write((byte) 4);
                }
//                int k = 0;
//                for(int i = 0; i < packetSize; i+=3){
//                    list.add(mainActivity.shifter(data[i], data[i+1], data[i+2]));
//                }

//                while(k <= packetSize - 3){
//                    if(data[k] == 0xB0) {
//                        list.add(mainActivity.shifter(data[k], data[k + 1], data[k + 2]));
//                        k += 3;
//                    }
//                    else{
//                        k++;
//                    }
//                }
//                Log.e("size", String.valueOf(data.length));
//                Log.e("Value", Arrays.toString(data));
//                Log.e("values", String.valueOf(list.size()));
//
//
//                if(list.size() >= 6000)
//                        kill = true;
            }

            Log.e("data", data.toString());
//        Log.e("data", data.toString());


//        Log.e("data raw", data.toString());

            int k = 0;
//        list.add(-5000);
//        boolean first = false;
            while (k <= data.size() - 4) {
                if ((data.get(k) >= 0xB0 && data.get(k) <= 0xB3) && (data.get(k + 3) >= 0xB0 && data.get(k + 3) <= 0xB3)) {
//            if ((data.get(k) >= 0xB0 && data.get(k) <= 0xB3) && (data.get(k+1) <= 0xB0 || data.get(k+1) >= 0xB3) && (data.get(k+2) <= 0xB0 || data.get(k+2) >= 0xB3) && (data.get(k+3) >= 0xB0 && data.get(k+3) <= 0xB3)) {
                    int d = MainActivity.shifterECG(data.get(k), data.get(k + 1), data.get(k + 2));
                    if (d <= 1300) list.add(d);
//                first = true;
                    k += 3;
//                Log.e("list size", String.valueOf(list.size()));
                } else /*if(first = true)*/ {
                    k++;
                }
            }

//        Log.e("data List", list.toString());

//        k=0;
//        while (k <= data1.size() - 4) {
////            if ((data.get(k) >= 0xB0 && data.get(k) <= 0xB3) && (data.get(k+3) >= 0xB0 && data.get(k+3) <= 0xB3)) {
//            if ((data1.get(k) >= 0xB0 && data1.get(k) <= 0xB3) && (data1.get(k+1) <= 0xB0 || data1.get(k+1) >= 0xB3) && (data1.get(k+2) <= 0xB0 || data1.get(k+2) >= 0xB3) && (data1.get(k+3) >= 0xB0 && data1.get(k+3) <= 0xB3)) {
//                list.add(Math.toIntExact(MainActivity.shifterECG(data1.get(k), data1.get(k + 1), data1.get(k + 2))));
////                first = true;
//                k += 3;
////                Log.e("list size", String.valueOf(list.size()));
//            } else /*if(first = true)*/ {
//                k++;
//            }
//        }
//        k=0;
//        while (k <= data2.size() - 4) {
////            if ((data2.get(k) >= 0xB0 && data2.get(k) <= 0xB3) && (data2.get(k+3) >= 0xB0 && data2.get(k+3) <= 0xB3)) {
//            if ((data2.get(k) >= 0xB0 && data2.get(k) <= 0xB3) && (data2.get(k+1) <= 0xB0 || data2.get(k+1) >= 0xB3) && (data2.get(k+2) <= 0xB0 || data2.get(k+2) >= 0xB3) && (data2.get(k+3) >= 0xB0 && data2.get(k+3) <= 0xB3)) {
//                list.add(Math.toIntExact(MainActivity.shifterECG(data2.get(k), data2.get(k + 1), data2.get(k + 2))));
////                first = true;
//                k += 3;
////            Log.e("list size", String.valueOf(list.size()));
//            } else /*if(first = true)*/ {
//                k++;
//            }
//        }

//        while (k <= data3.size() - 4) {
////            if ((data3.get(k) >= 0xB0 && data3.get(k) <= 0xB3) && (data3.get(k+3) >= 0xB0 && data3.get(k+3) <= 0xB3)) {
//            if ((data3.get(k) >= 0xB0 && data3.get(k) <= 0xB3) && (data3.get(k+1) <= 0xB0 || data3.get(k+1) >= 0xB3) && (data3.get(k+2) <= 0xB0 || data3.get(k+2) >= 0xB3) && (data3.get(k+3) >= 0xB0 && data3.get(k+3) <= 0xB3)) {
//                list.add(Math.toIntExact(MainActivity.shifterECG(data3.get(k), data3.get(k + 1), data3.get(k + 2))));
////                first = true;
//                k += 3;
//            } else /*if(first = true)*/ {
//                k++;
//            }
//        }
//        Log.e("data", data.toString());
//        Log.e("list", list.toString());

            ArrayList<Integer> finalList = new ArrayList<Integer>();
            int period = 5;
            int passes = 3;

            for (int i = 0; i < list.size() - period; i++) {
                double d = 0;
                for (int j = i; j < i + period; j++) {
//                    d += Math.pow(list.get(j), 2);
                    d += list.get(j);
                }
                finalList.add((int) (d / period));
//                finalList.add((int) Math.pow((d / period), 0.5));
//            data.add((list.get(i)+list.get(i+1)+list.get(i+2)+list.get(i+3)+list.get(i+4)+list.get(i+5)+list.get(i+6))/7);
            }
            list.clear();


            Log.e("list size", finalList.toString());
//        Log.e("data", list.toString());
//        data.clear();
            return finalList;
        }

        public ArrayList<Integer> runPPG(InputStream inputStream, OutputStream outputStream) throws IOException {

            int sampleSize = 10000;
            ArrayList<Integer> list = new ArrayList<Integer>();
            inputStream.read();

            ArrayList<Integer> data = new ArrayList<Integer>();


            while (!kill) {

                data.add(inputStream.read());

                Log.e("data", data.toString());

                if((sampleSize - data.size()) % 1000 == 0){
                    Toast.makeText(getApplicationContext(), String.valueOf((sampleSize - data.size()) / 1000), Toast.LENGTH_SHORT ).show();
                }

                if (data.size() >= sampleSize) {
                    kill = true;
                    outputStream.write((byte) 4);
                }
            }

            int k = 0;
            while (k <= data.size() - 4) {
                if (data.get(k) >= 0x0000 && data.get(k) <= 0x0011 && data.get(k + 3) >= 0x0000 && data.get(k + 3) <= 0x0011) {
                    int d = MainActivity.shifterPPG(data.get(k), data.get(k + 1), data.get(k + 2));
                    list.add(d);
                    k += 3;
                } else {
                    k++;
                }
            }

            data.clear();

            int period = 1000;

            for (int i = 0; i < list.size() - period; i++) {
                double d = 0;
                for (int j = i; j < i + period; j++) {
                    d += list.get(j);
                }
                data.add((int) (d / period));
//            data.add((list.get(i)+list.get(i+1)+list.get(i+2)+list.get(i+3)+list.get(i+4)+list.get(i+5)+list.get(i+6))/7);
            }

//            Log.e("Data", data.toString());

            list.clear();
            return data;
        }
    }
}

